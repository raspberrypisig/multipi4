#!/usr/bin/env bash
set -x


diskinfo() {
local usb=$(ls /dev/disk/by-id/usb* 2>/dev/null)
local ata=$(ls /dev/disk/by-id/ata* 2>/dev/null)

local usbdevices=$(readlink -m -f $usb $ata|sed -r  '/[0-9]+/d'|sort)

for usbdisk in $usbdevices
do
  model=$(udevadm info $usbdisk|grep ID_MODEL=|cut -f2- -d'=')
  vendor=$(udevadm info $usbdisk|grep ID_VENDOR=|cut -f2- -d'=')
  capacity=$(fdisk -l $usbdisk|head -n1|awk '{print $3 " " $4}'|cut -f1 -d',')
  if [ ! $vendor ];
  then
  echo "${usbdisk}: $model $capacity"  
  else
  echo "${usbdisk}: $vendor $model $capacity"
  fi
done

}

existingmultipi4() {
local disk="$1"

local partitions=$(fdisk -l  $disk | sed -n '/Type/,$p'|sed -n '2,$p'|awk '{print $1}')
#echo "$partitions"
local numberofpartitions=$(echo -en "$partitions" | wc -l)
numberofpartitions=$(( numberofpartitions + 1  ))
#echo $numberofpartitions

if [ $numberofpartitions -ne 3 ];
then
return 1
fi

local partitiontypes=$(blkid|grep $disk|sed -r 's/.*TYPE="([^"]*)(.*)/\1/')
readarray -t parray <<<$partitiontypes
#declare -p parray

local existingtypes=("vfat" "vfat" "btrfs")
local A=$(echo $partitiontypes)
local B=${existingtypes[@]}

if [ "$A" != "$B"  ];
then
return 1
fi
return 0  
}

moveup() {

disk="$1"

mount ${disk}2 /tmp/multipi4/distros

selectedos=$(cat /tmp/multipi4.selection)
oslistfile=/tmp/multipi4/distros/oslist.txt
#cat $oslistfile

linenumber=$(grep -n "$selectedos" $oslistfile | cut -f1 -d':')

if [ $linenumber -eq 1 ];
then
umount ${disk}2
exit 0
fi

echo -e "\f" > /tmp/multipi4.fifo 

newlist=$(awk "!/$selectedos/ { if (NR > 1) print prev; prev=\$0} /$selectedos/ {print \$0;} END {print prev}" < /tmp/multipi4/distros/oslist.txt)
echo $newlist
num=$(echo $newlist|wc -l)
echo $num
echo -e "$newlist" > /tmp/multipi4.fifo 
echo  "$newlist" > $oslistfile
umount ${disk}2

}

movedown() {

disk="$1"

mount ${disk}2 /tmp/multipi4/distros

selectedos=$(cat /tmp/multipi4.selection)
oslistfile=/tmp/multipi4/distros/oslist.txt

linenumber=$(grep -n "$selectedos" $oslistfile | cut -f1 -d':')
linecount=$(cat $oslistfile| wc -l)


if [ $linenumber -eq $linecount ];
then
umount ${disk}2
return
fi


echo -e "\f" > /tmp/multipi4.fifo 

newlist=$(sed -n "/$selectedos/{h;n;p;g};p" /tmp/multipi4/distros/oslist.txt)
echo $newlist
num=$(echo $newlist|wc -l)
echo $num
echo -e "$newlist" > /tmp/multipi4.fifo 
echo  "$newlist" > $oslistfile
umount ${disk}2

}

createsubvolumename() {
  name="$1"
  typeset -l newvolname
  newvolname=${name// /_}
  newvolname=${newvolname//./__}
  echo @$newvolname  
}

delete() {

disk="$1"
selectedos="$2"

echo $selectedos
echo $disk
mkdir -p /tmp/multipi4/deleting3
mkdir -p /tmp/multipi4/deleting2
mount ${disk}2 /tmp/multipi4/deleting2
mount ${disk}3 /tmp/multipi4/deleting3
vol=$(createsubvolumename "$selectedos") 
rm -rf /tmp/multipi4/deleting3/$vol
oslist=$(sed "/^$selectedos\$/d" /tmp/multipi4/deleting2/oslist.txt)
sed -i "/^$selectedos\$/d" /tmp/multipi4/deleting2/oslist.txt
(
echo -e "\f" > /tmp/multipi4.fifo
echo -e "$oslist" > /tmp/multipi4.fifo
)
echo "Sleeping for 20 seconds"
sleep 20
umount ${disk}2
umount ${disk}3

  
}

editos() {

disk="$1"

selectedos=$(cat /tmp/multipi4.selection)


output="$(yad --center --borders=10 \
         --text "OS: $selectedos" \
         --button "Cancel:0" \
         --button "Delete:1" \
)"

buttonpressed=$?

if [ $buttonpressed -eq 1 ];
then
gnome-terminal --wait -- bash multipi4-gui delete "$disk" "$selectedos"
fi
echo "sleep for 20 seconds"
sleep 20  
}





addos() {
disk="$1"

declare -A ary

basedistros=

while IFS== read -r key value; do
  ary["$key"]="$value"
  basedistros+="${key}\!"
done < /etc/multipi4/basedistros.txt

basedistros=${basedistros::-1}

output="$(yad --width=600 --center --height=400 --buttons-layout=center --title="Multipi4 - Add OS" --text="Add OS" \
--image="/usr/share/icons/Tango/scalable/emotes/face-smile.svg" \
--form  \
--field=Name "" \
--field="Base distro":CB \
"$basedistros" \
--field="Image(*.img)":SFL  \
--button="OK:0" \
--button="Cancel:1" \
)"


buttonpressed=$?
if [ $buttonpressed -eq 0  ];
then
#echo $output
name=$(echo $output | cut -f1 -d'|')
basedistro=$(echo $output | cut -f2 -d'|')
image=$(echo $output | cut -f3 -d'|')
#echo $name
#echo $basedistro
#echo $image
#bash multipi4 "$basedistro" "$image" "$disk" "$name" 
gnome-terminal --wait -- multipi4 ${ary["$basedistro"]} "$image" "$disk" "$name"
status=$?
if [ $status -eq 0 ];
then
  echo "Finished."
  
else
  echo "Something went wrong."
fi

pipefile=/tmp/multip4.fifo
#echo -e "\f" > $pipefile &
mkdir -p /tmp/multipi4/distros
mount ${disk}2 /tmp/multipi4/distros
oslist=$(cat /tmp/multipi4/distros/oslist.txt)
umount ${disk}2
(
echo -e "\f" > /tmp/multipi4.fifo
echo -e "$oslist" > /tmp/multipi4.fifo
)
echo [info] Sleep for 20 seconds
sleep 20
return 0
else
return 1
fi

  
}

multipi4_main() {
disk="$1"



pipefile=/tmp/multipi4.fifo
selectedos=/tmp/multipi4.selection
fd=4

rm -f $pipefile
rm -f $selectedos


mkfifo $pipefile
touch $selectedos

mkdir -p /tmp/multipi4/distros
mount ${disk}2 /tmp/multipi4/distros

if [ ! -f /tmp/multipi4/distros/oslist.txt ];
then
oslist=
else
oslist=$(cat /tmp/multipi4/distros/oslist.txt)
fi


exec 4<> $pipefile


echo $oslist
umount ${disk}2
echo -e "\f" > $pipefile &
sleep 1
echo -e "$oslist" > $pipefile &


output="$(yad --center --borders=10 --title='MultiPi4' --width=600 --height=400 --no-headers --buttons-layout=center --kill-parent  \
        --text="\nInstalled OS List\n" --text-align=center  \
        --list --separator='\n'  \
        --column=:Name --print-column=1 \
        --select-action="/bin/sh -c \"printf \%\s'\n' %s > $selectedos \"" \
        --button="Add OS:bash multipi4-gui addos $disk" \
        --button="Move Up:bash multipi4-gui moveup $disk" \
        --button="Move Down:bash multipi4-gui movedown $disk" \
        --button="Edit:bash multipi4-gui editos $disk" \
        <&4 ) "


}

preparedisk() {

disk="$1"

gnome-terminal --wait -- multipi4-preparedisk "$disk"
status=$?
if [ $status -eq 0 ];
then
  echo "Finished."
  local FIRST_TEMP_DIR=/tmp/multipi4/alpine/usb1
  rm -rf $FIRST_TEMP_DIR
  mkdir -p $FIRST_TEMP_DIR
  mount ${disk}1 $FIRST_TEMP_DIR
  cp -rv /tmp/multipi4/alpine/rpi/* /tmp/multipi4/alpine/usb1
  umount $FIRST_TEMP_DIR
  multipi4_main $disk
else
  echo "Something went wrong."
fi

}


wipedisk() {
disk="$1"

output="$(yad --center --borders=10 \
         --text "You selected disk: ${disk}.\nThe data on the disk will need to be deleted.\nData will be DESTROYED on disk.\nPress OK to proceed. Press cancel to exit. "
)"

buttonpressed=$?

if [ $buttonpressed -eq 0 ];
then
preparedisk $disk
else
exit 1
fi

}

listdisks() {
output="$(diskinfo | yad --center --borders=30 --title='MultiPi4' --width=600 --height=400 --no-headers --buttons-layout=center  \
        --text="\nPlease select drive to make into a multiboot Pi disk\n" --text-align=center  \
        --list --separator='\n'  \
        --column=:Name --print-column=1 \
        --button=Select:0 \
        --button=Cancel:1 \
        )"

buttonpressed=$?
if [ $buttonpressed -eq 0  ];
then
#echo $output
disk=$(echo $output | cut -f1 -d':')
existingmultipi4 $disk
existing=$?

if [ $existing -eq 0 ];
then
  multipi4_main $disk
else
  wipedisk $disk
fi



else
exit 1
fi

}

if [ $# -gt 1 ];
then
  mainarg=$1
  shift
  $mainarg "$@"
else 
listdisks
fi




